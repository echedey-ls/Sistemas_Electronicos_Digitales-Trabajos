
proyecto_micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000364c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080037d4  080037d4  000137d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800382c  0800382c  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003834  08003834  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003834  08003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003838  08003838  00013838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800383c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00000124  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000144  20000144  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b37f  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001cb0  00000000  00000000  0002b412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009e0  00000000  00000000  0002d0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007b7  00000000  00000000  0002daa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fe14  00000000  00000000  0002e25f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d4b9  00000000  00000000  0004e073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c17b3  00000000  00000000  0005b52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000287c  00000000  00000000  0011cce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  0011f55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037bc 	.word	0x080037bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	080037bc 	.word	0x080037bc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	f023 030f 	bic.w	r3, r3, #15
 80004d4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	011b      	lsls	r3, r3, #4
 80004da:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
 80004de:	f043 030c 	orr.w	r3, r3, #12
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	f043 0308 	orr.w	r3, r3, #8
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004f0:	7bbb      	ldrb	r3, [r7, #14]
 80004f2:	f043 030c 	orr.w	r3, r3, #12
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004fa:	7bbb      	ldrb	r3, [r7, #14]
 80004fc:	f043 0308 	orr.w	r3, r3, #8
 8000500:	b2db      	uxtb	r3, r3
 8000502:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000504:	f107 0208 	add.w	r2, r7, #8
 8000508:	2364      	movs	r3, #100	; 0x64
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2304      	movs	r3, #4
 800050e:	214e      	movs	r1, #78	; 0x4e
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <lcd_send_cmd+0x5c>)
 8000512:	f001 fbfd 	bl	8001d10 <HAL_I2C_Master_Transmit>
}
 8000516:	bf00      	nop
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	2000003c 	.word	0x2000003c

08000524 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af02      	add	r7, sp, #8
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f023 030f 	bic.w	r3, r3, #15
 8000534:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	011b      	lsls	r3, r3, #4
 800053a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	f043 030d 	orr.w	r3, r3, #13
 8000542:	b2db      	uxtb	r3, r3
 8000544:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	f043 0309 	orr.w	r3, r3, #9
 800054c:	b2db      	uxtb	r3, r3
 800054e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000550:	7bbb      	ldrb	r3, [r7, #14]
 8000552:	f043 030d 	orr.w	r3, r3, #13
 8000556:	b2db      	uxtb	r3, r3
 8000558:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800055a:	7bbb      	ldrb	r3, [r7, #14]
 800055c:	f043 0309 	orr.w	r3, r3, #9
 8000560:	b2db      	uxtb	r3, r3
 8000562:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000564:	f107 0208 	add.w	r2, r7, #8
 8000568:	2364      	movs	r3, #100	; 0x64
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	2304      	movs	r3, #4
 800056e:	214e      	movs	r1, #78	; 0x4e
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <lcd_send_data+0x5c>)
 8000572:	f001 fbcd 	bl	8001d10 <HAL_I2C_Master_Transmit>
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	2000003c 	.word	0x2000003c

08000584 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
    switch (row)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d003      	beq.n	800059c <lcd_put_cur+0x18>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d005      	beq.n	80005a6 <lcd_put_cur+0x22>
 800059a:	e009      	b.n	80005b0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a2:	603b      	str	r3, [r7, #0]
            break;
 80005a4:	e004      	b.n	80005b0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005ac:	603b      	str	r3, [r7, #0]
            break;
 80005ae:	bf00      	nop
    }

    lcd_send_cmd (col);
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ff85 	bl	80004c4 <lcd_send_cmd>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <lcd_init>:


void lcd_init (void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80005c6:	2032      	movs	r0, #50	; 0x32
 80005c8:	f000 fbea 	bl	8000da0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005cc:	2030      	movs	r0, #48	; 0x30
 80005ce:	f7ff ff79 	bl	80004c4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80005d2:	2005      	movs	r0, #5
 80005d4:	f000 fbe4 	bl	8000da0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005d8:	2030      	movs	r0, #48	; 0x30
 80005da:	f7ff ff73 	bl	80004c4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 fbde 	bl	8000da0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005e4:	2030      	movs	r0, #48	; 0x30
 80005e6:	f7ff ff6d 	bl	80004c4 <lcd_send_cmd>
	HAL_Delay(10);
 80005ea:	200a      	movs	r0, #10
 80005ec:	f000 fbd8 	bl	8000da0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80005f0:	2020      	movs	r0, #32
 80005f2:	f7ff ff67 	bl	80004c4 <lcd_send_cmd>
	HAL_Delay(10);
 80005f6:	200a      	movs	r0, #10
 80005f8:	f000 fbd2 	bl	8000da0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80005fc:	2028      	movs	r0, #40	; 0x28
 80005fe:	f7ff ff61 	bl	80004c4 <lcd_send_cmd>
	HAL_Delay(1);
 8000602:	2001      	movs	r0, #1
 8000604:	f000 fbcc 	bl	8000da0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000608:	2008      	movs	r0, #8
 800060a:	f7ff ff5b 	bl	80004c4 <lcd_send_cmd>
	HAL_Delay(1);
 800060e:	2001      	movs	r0, #1
 8000610:	f000 fbc6 	bl	8000da0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000614:	2001      	movs	r0, #1
 8000616:	f7ff ff55 	bl	80004c4 <lcd_send_cmd>
	HAL_Delay(1);
 800061a:	2001      	movs	r0, #1
 800061c:	f000 fbc0 	bl	8000da0 <HAL_Delay>
	HAL_Delay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 fbbd 	bl	8000da0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000626:	2006      	movs	r0, #6
 8000628:	f7ff ff4c 	bl	80004c4 <lcd_send_cmd>
	HAL_Delay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f000 fbb7 	bl	8000da0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000632:	200c      	movs	r0, #12
 8000634:	f7ff ff46 	bl	80004c4 <lcd_send_cmd>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000644:	e006      	b.n	8000654 <lcd_send_string+0x18>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	1c5a      	adds	r2, r3, #1
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff68 	bl	8000524 <lcd_send_data>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1f4      	bne.n	8000646 <lcd_send_string+0xa>
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <getKey>:
	}
	return btns;
}
*/

void getKey(char* str){
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	int btns = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 4; i++){
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	e032      	b.n	80006e0 <getKey+0x78>
		HAL_GPIO_WritePin(BANK, outs[i], GPIO_PIN_SET);
 800067a:	4a22      	ldr	r2, [pc, #136]	; (8000704 <getKey+0x9c>)
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000682:	2201      	movs	r2, #1
 8000684:	4619      	mov	r1, r3
 8000686:	4820      	ldr	r0, [pc, #128]	; (8000708 <getKey+0xa0>)
 8000688:	f001 f9e4 	bl	8001a54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BANK, (outall ^ outs[i]), GPIO_PIN_RESET);
 800068c:	4a1d      	ldr	r2, [pc, #116]	; (8000704 <getKey+0x9c>)
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <getKey+0xa4>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	4053      	eors	r3, r2
 800069a:	b29b      	uxth	r3, r3
 800069c:	2200      	movs	r2, #0
 800069e:	4619      	mov	r1, r3
 80006a0:	4819      	ldr	r0, [pc, #100]	; (8000708 <getKey+0xa0>)
 80006a2:	f001 f9d7 	bl	8001a54 <HAL_GPIO_WritePin>
		for(int j = 0; j < 4; j++){
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e013      	b.n	80006d4 <getKey+0x6c>
			if(HAL_GPIO_ReadPin(BANK, inps[j])) btns = i*4 + j + 1;
 80006ac:	4a18      	ldr	r2, [pc, #96]	; (8000710 <getKey+0xa8>)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006b4:	4619      	mov	r1, r3
 80006b6:	4814      	ldr	r0, [pc, #80]	; (8000708 <getKey+0xa0>)
 80006b8:	f001 f9b4 	bl	8001a24 <HAL_GPIO_ReadPin>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d005      	beq.n	80006ce <getKey+0x66>
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	009a      	lsls	r2, r3, #2
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	4413      	add	r3, r2
 80006ca:	3301      	adds	r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
		for(int j = 0; j < 4; j++){
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	dde8      	ble.n	80006ac <getKey+0x44>
	for(int i = 0; i < 4; i++){
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	3301      	adds	r3, #1
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	ddc9      	ble.n	800067a <getKey+0x12>
		}
	}
	str[0] = pads[btns];
 80006e6:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <getKey+0xac>)
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	4413      	add	r3, r2
 80006ec:	781a      	ldrb	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	701a      	strb	r2, [r3, #0]
	str[1] = '\0';
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
}
 80006fa:	bf00      	nop
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000000c 	.word	0x2000000c
 8000708:	40020c00 	.word	0x40020c00
 800070c:	20000000 	.word	0x20000000
 8000710:	20000004 	.word	0x20000004
 8000714:	080037f8 	.word	0x080037f8

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
int main(void)
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f000 faca 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f82a 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f000 f90a 	bl	8000944 <MX_GPIO_Init>
  MX_DMA_Init();
 8000730:	f000 f8e8 	bl	8000904 <MX_DMA_Init>
  MX_I2C1_Init();
 8000734:	f000 f88e 	bl	8000854 <MX_I2C1_Init>
  MX_UART4_Init();
 8000738:	f000 f8ba 	bl	80008b0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init ();
 800073c:	f7ff ff41 	bl	80005c2 <lcd_init>
  lcd_send_string("PRESS A BUTTON");
 8000740:	480a      	ldr	r0, [pc, #40]	; (800076c <main+0x54>)
 8000742:	f7ff ff7b 	bl	800063c <lcd_send_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  getKey(buffer);
 8000746:	480a      	ldr	r0, [pc, #40]	; (8000770 <main+0x58>)
 8000748:	f7ff ff8e 	bl	8000668 <getKey>
	  lcd_put_cur(1, 0);
 800074c:	2100      	movs	r1, #0
 800074e:	2001      	movs	r0, #1
 8000750:	f7ff ff18 	bl	8000584 <lcd_put_cur>
	  lcd_send_string(buffer);
 8000754:	4806      	ldr	r0, [pc, #24]	; (8000770 <main+0x58>)
 8000756:	f7ff ff71 	bl	800063c <lcd_send_string>
	  lcd_send_string("                ");
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <main+0x5c>)
 800075c:	f7ff ff6e 	bl	800063c <lcd_send_string>
	  //This call is non blocking and should be called when we want to
	  //start updating FPGA_STATUS
	  HAL_UART_Receive_DMA(&huart4, &FPGA_STATUS, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	4905      	ldr	r1, [pc, #20]	; (8000778 <main+0x60>)
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <main+0x64>)
 8000766:	f002 fb15 	bl	8002d94 <HAL_UART_Receive_DMA>
  {
 800076a:	e7ec      	b.n	8000746 <main+0x2e>
 800076c:	080037d4 	.word	0x080037d4
 8000770:	2000013c 	.word	0x2000013c
 8000774:	080037e4 	.word	0x080037e4
 8000778:	20000138 	.word	0x20000138
 800077c:	20000090 	.word	0x20000090

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	; 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	2230      	movs	r2, #48	; 0x30
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f002 ffe8 	bl	8003764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <SystemClock_Config+0xcc>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a27      	ldr	r2, [pc, #156]	; (800084c <SystemClock_Config+0xcc>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b25      	ldr	r3, [pc, #148]	; (800084c <SystemClock_Config+0xcc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <SystemClock_Config+0xd0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <SystemClock_Config+0xd0>)
 80007ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2310      	movs	r3, #16
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007f0:	2308      	movs	r3, #8
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007f4:	2332      	movs	r3, #50	; 0x32
 80007f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007fc:	2307      	movs	r3, #7
 80007fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fddd 	bl	80023c4 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000810:	f000 f8f4 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000818:	2302      	movs	r3, #2
 800081a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000820:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f002 f83e 	bl	80028b4 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800083e:	f000 f8dd 	bl	80009fc <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	; 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_I2C1_Init+0x50>)
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <MX_I2C1_Init+0x54>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000860:	4a12      	ldr	r2, [pc, #72]	; (80008ac <MX_I2C1_Init+0x58>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_I2C1_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000892:	f001 f8f9 	bl	8001a88 <HAL_I2C_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800089c:	f000 f8ae 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	2000003c 	.word	0x2000003c
 80008a8:	40005400 	.word	0x40005400
 80008ac:	000186a0 	.word	0x000186a0

080008b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_UART4_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_UART4_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 10000;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_UART4_Init+0x4c>)
 80008bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80008c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_UART4_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_UART4_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_UART4_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_UART4_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_UART4_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_UART4_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_UART4_Init+0x4c>)
 80008e8:	f002 fa04 	bl	8002cf4 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f883 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000090 	.word	0x20000090
 8000900:	40004c00 	.word	0x40004c00

08000904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_DMA_Init+0x3c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <MX_DMA_Init+0x3c>)
 8000914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_DMA_Init+0x3c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	200d      	movs	r0, #13
 800092c:	f000 fb37 	bl	8000f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000930:	200d      	movs	r0, #13
 8000932:	f000 fb50 	bl	8000fd6 <HAL_NVIC_EnableIRQ>

}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <MX_GPIO_Init+0xb0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a24      	ldr	r2, [pc, #144]	; (80009f4 <MX_GPIO_Init+0xb0>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_GPIO_Init+0xb0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_GPIO_Init+0xb0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a1d      	ldr	r2, [pc, #116]	; (80009f4 <MX_GPIO_Init+0xb0>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_GPIO_Init+0xb0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_GPIO_Init+0xb0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a16      	ldr	r2, [pc, #88]	; (80009f4 <MX_GPIO_Init+0xb0>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_GPIO_Init+0xb0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, teclado_PIN4_OUT_Pin|teclado_PIN5_OUT_Pin|teclado_PIN6_OUT_Pin|teclado_PIN7_OUT_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	21f0      	movs	r1, #240	; 0xf0
 80009b2:	4811      	ldr	r0, [pc, #68]	; (80009f8 <MX_GPIO_Init+0xb4>)
 80009b4:	f001 f84e 	bl	8001a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : teclado_PIN0_IN_Pin teclado_PIN1_IN_Pin teclado_PIN2_IN_Pin teclado_PIN3_IN_Pin */
  GPIO_InitStruct.Pin = teclado_PIN0_IN_Pin|teclado_PIN1_IN_Pin|teclado_PIN2_IN_Pin|teclado_PIN3_IN_Pin;
 80009b8:	230f      	movs	r3, #15
 80009ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009c0:	2302      	movs	r3, #2
 80009c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	4619      	mov	r1, r3
 80009ca:	480b      	ldr	r0, [pc, #44]	; (80009f8 <MX_GPIO_Init+0xb4>)
 80009cc:	f000 fe8e 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : teclado_PIN4_OUT_Pin teclado_PIN5_OUT_Pin teclado_PIN6_OUT_Pin teclado_PIN7_OUT_Pin */
  GPIO_InitStruct.Pin = teclado_PIN4_OUT_Pin|teclado_PIN5_OUT_Pin|teclado_PIN6_OUT_Pin|teclado_PIN7_OUT_Pin;
 80009d0:	23f0      	movs	r3, #240	; 0xf0
 80009d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	4619      	mov	r1, r3
 80009e6:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_GPIO_Init+0xb4>)
 80009e8:	f000 fe80 	bl	80016ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020c00 	.word	0x40020c00

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <Error_Handler+0x8>
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a46:	2007      	movs	r0, #7
 8000a48:	f000 fa9e 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a19      	ldr	r2, [pc, #100]	; (8000adc <HAL_I2C_MspInit+0x84>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d12b      	bne.n	8000ad2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a96:	23c0      	movs	r3, #192	; 0xc0
 8000a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9a:	2312      	movs	r3, #18
 8000a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <HAL_I2C_MspInit+0x8c>)
 8000ab2:	f000 fe1b 	bl	80016ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000ac0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a30      	ldr	r2, [pc, #192]	; (8000bc8 <HAL_UART_MspInit+0xe0>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d15a      	bne.n	8000bc0 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <HAL_UART_MspInit+0xe4>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a2e      	ldr	r2, [pc, #184]	; (8000bcc <HAL_UART_MspInit+0xe4>)
 8000b14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <HAL_UART_MspInit+0xe4>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <HAL_UART_MspInit+0xe4>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <HAL_UART_MspInit+0xe4>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <HAL_UART_MspInit+0xe4>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b42:	2303      	movs	r3, #3
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b52:	2308      	movs	r3, #8
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481c      	ldr	r0, [pc, #112]	; (8000bd0 <HAL_UART_MspInit+0xe8>)
 8000b5e:	f000 fdc5 	bl	80016ec <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_UART_MspInit+0xec>)
 8000b64:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <HAL_UART_MspInit+0xf0>)
 8000b66:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_UART_MspInit+0xec>)
 8000b6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b6e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_UART_MspInit+0xec>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_UART_MspInit+0xec>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_UART_MspInit+0xec>)
 8000b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b82:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <HAL_UART_MspInit+0xec>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_UART_MspInit+0xec>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_UART_MspInit+0xec>)
 8000b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b96:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_UART_MspInit+0xec>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_UART_MspInit+0xec>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000ba4:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <HAL_UART_MspInit+0xec>)
 8000ba6:	f000 fa31 	bl	800100c <HAL_DMA_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000bb0:	f7ff ff24 	bl	80009fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <HAL_UART_MspInit+0xec>)
 8000bb8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bba:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <HAL_UART_MspInit+0xec>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	; 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40004c00 	.word	0x40004c00
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	200000d8 	.word	0x200000d8
 8000bd8:	40026040 	.word	0x40026040

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 f89a 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <DMA1_Stream2_IRQHandler+0x10>)
 8000c36:	f000 faef 	bl	8001218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000d8 	.word	0x200000d8

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c6c:	f7ff ffea 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	; (8000ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	; (8000cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c96:	f002 fd6d 	bl	8003774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fd3d 	bl	8000718 <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000cac:	0800383c 	.word	0x0800383c
  ldr r2, =_sbss
 8000cb0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000cb4:	20000144 	.word	0x20000144

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <HAL_Init+0x40>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_Init+0x40>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_Init+0x40>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f94f 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f808 	bl	8000d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fe8a 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x54>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_InitTick+0x58>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f967 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00e      	b.n	8000d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d80a      	bhi.n	8000d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f000 f92f 	bl	8000f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d40:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <HAL_InitTick+0x5c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000014 	.word	0x20000014
 8000d58:	2000001c 	.word	0x2000001c
 8000d5c:	20000018 	.word	0x20000018

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	2000001c 	.word	0x2000001c
 8000d84:	20000140 	.word	0x20000140

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000140 	.word	0x20000140

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff ffee 	bl	8000d88 <HAL_GetTick>
 8000dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db8:	d005      	beq.n	8000dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_Delay+0x44>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dc6:	bf00      	nop
 8000dc8:	f7ff ffde 	bl	8000d88 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d8f7      	bhi.n	8000dc8 <HAL_Delay+0x28>
  {
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000001c 	.word	0x2000001c

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1a:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	60d3      	str	r3, [r2, #12]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	db0b      	blt.n	8000e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f003 021f 	and.w	r2, r3, #31
 8000e64:	4907      	ldr	r1, [pc, #28]	; (8000e84 <__NVIC_EnableIRQ+0x38>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	095b      	lsrs	r3, r3, #5
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	; (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	; (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	; 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f54:	d301      	bcc.n	8000f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00f      	b.n	8000f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <SysTick_Config+0x40>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f62:	210f      	movs	r1, #15
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f7ff ff8e 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <SysTick_Config+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SysTick_Config+0x40>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff29 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb0:	f7ff ff3e 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff ff8e 	bl	8000edc <NVIC_EncodePriority>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff5d 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff31 	bl	8000e4c <__NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffa2 	bl	8000f44 <SysTick_Config>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff feb6 	bl	8000d88 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e099      	b.n	800115c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2202      	movs	r2, #2
 800102c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001048:	e00f      	b.n	800106a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800104a:	f7ff fe9d 	bl	8000d88 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b05      	cmp	r3, #5
 8001056:	d908      	bls.n	800106a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2220      	movs	r2, #32
 800105c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2203      	movs	r2, #3
 8001062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e078      	b.n	800115c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1e8      	bne.n	800104a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <HAL_DMA_Init+0x158>)
 8001084:	4013      	ands	r3, r2
 8001086:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001096:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d107      	bne.n	80010d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4313      	orrs	r3, r2
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f023 0307 	bic.w	r3, r3, #7
 80010ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d117      	bne.n	800112e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	4313      	orrs	r3, r2
 8001106:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00e      	beq.n	800112e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fa6f 	bl	80015f4 <DMA_CheckFifoParam>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d008      	beq.n	800112e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2240      	movs	r2, #64	; 0x40
 8001120:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800112a:	2301      	movs	r3, #1
 800112c:	e016      	b.n	800115c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 fa26 	bl	8001588 <DMA_CalcBaseAndBitshift>
 800113c:	4603      	mov	r3, r0
 800113e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001144:	223f      	movs	r2, #63	; 0x3f
 8001146:	409a      	lsls	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	f010803f 	.word	0xf010803f

08001168 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <HAL_DMA_Start_IT+0x26>
 800118a:	2302      	movs	r3, #2
 800118c:	e040      	b.n	8001210 <HAL_DMA_Start_IT+0xa8>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d12f      	bne.n	8001202 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2202      	movs	r2, #2
 80011a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f000 f9b8 	bl	800152c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c0:	223f      	movs	r2, #63	; 0x3f
 80011c2:	409a      	lsls	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0216 	orr.w	r2, r2, #22
 80011d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0208 	orr.w	r2, r2, #8
 80011ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0201 	orr.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	e005      	b.n	800120e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800120a:	2302      	movs	r3, #2
 800120c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800120e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001224:	4b8e      	ldr	r3, [pc, #568]	; (8001460 <HAL_DMA_IRQHandler+0x248>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a8e      	ldr	r2, [pc, #568]	; (8001464 <HAL_DMA_IRQHandler+0x24c>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	0a9b      	lsrs	r3, r3, #10
 8001230:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001242:	2208      	movs	r2, #8
 8001244:	409a      	lsls	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4013      	ands	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d01a      	beq.n	8001284 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	d013      	beq.n	8001284 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0204 	bic.w	r2, r2, #4
 800126a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001270:	2208      	movs	r2, #8
 8001272:	409a      	lsls	r2, r3
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800127c:	f043 0201 	orr.w	r2, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001288:	2201      	movs	r2, #1
 800128a:	409a      	lsls	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4013      	ands	r3, r2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d012      	beq.n	80012ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00b      	beq.n	80012ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a6:	2201      	movs	r2, #1
 80012a8:	409a      	lsls	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b2:	f043 0202 	orr.w	r2, r3, #2
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012be:	2204      	movs	r2, #4
 80012c0:	409a      	lsls	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d012      	beq.n	80012f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00b      	beq.n	80012f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012dc:	2204      	movs	r2, #4
 80012de:	409a      	lsls	r2, r3
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e8:	f043 0204 	orr.w	r2, r3, #4
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f4:	2210      	movs	r2, #16
 80012f6:	409a      	lsls	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d043      	beq.n	8001388 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d03c      	beq.n	8001388 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001312:	2210      	movs	r2, #16
 8001314:	409a      	lsls	r2, r3
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d018      	beq.n	800135a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d108      	bne.n	8001348 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	2b00      	cmp	r3, #0
 800133c:	d024      	beq.n	8001388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	4798      	blx	r3
 8001346:	e01f      	b.n	8001388 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800134c:	2b00      	cmp	r3, #0
 800134e:	d01b      	beq.n	8001388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	4798      	blx	r3
 8001358:	e016      	b.n	8001388 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001364:	2b00      	cmp	r3, #0
 8001366:	d107      	bne.n	8001378 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0208 	bic.w	r2, r2, #8
 8001376:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138c:	2220      	movs	r2, #32
 800138e:	409a      	lsls	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 808f 	beq.w	80014b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 8087 	beq.w	80014b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ae:	2220      	movs	r2, #32
 80013b0:	409a      	lsls	r2, r3
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b05      	cmp	r3, #5
 80013c0:	d136      	bne.n	8001430 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0216 	bic.w	r2, r2, #22
 80013d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d103      	bne.n	80013f2 <HAL_DMA_IRQHandler+0x1da>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0208 	bic.w	r2, r2, #8
 8001400:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001406:	223f      	movs	r2, #63	; 0x3f
 8001408:	409a      	lsls	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001422:	2b00      	cmp	r3, #0
 8001424:	d07e      	beq.n	8001524 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	4798      	blx	r3
        }
        return;
 800142e:	e079      	b.n	8001524 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d01d      	beq.n	800147a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10d      	bne.n	8001468 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001450:	2b00      	cmp	r3, #0
 8001452:	d031      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	4798      	blx	r3
 800145c:	e02c      	b.n	80014b8 <HAL_DMA_IRQHandler+0x2a0>
 800145e:	bf00      	nop
 8001460:	20000014 	.word	0x20000014
 8001464:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146c:	2b00      	cmp	r3, #0
 800146e:	d023      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	4798      	blx	r3
 8001478:	e01e      	b.n	80014b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10f      	bne.n	80014a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0210 	bic.w	r2, r2, #16
 8001496:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d032      	beq.n	8001526 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d022      	beq.n	8001512 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2205      	movs	r2, #5
 80014d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d307      	bcc.n	8001500 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f2      	bne.n	80014e4 <HAL_DMA_IRQHandler+0x2cc>
 80014fe:	e000      	b.n	8001502 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001500:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	4798      	blx	r3
 8001522:	e000      	b.n	8001526 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001524:	bf00      	nop
    }
  }
}
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001548:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b40      	cmp	r3, #64	; 0x40
 8001558:	d108      	bne.n	800156c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800156a:	e007      	b.n	800157c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	60da      	str	r2, [r3, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	3b10      	subs	r3, #16
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <DMA_CalcBaseAndBitshift+0x64>)
 800159a:	fba2 2303 	umull	r2, r3, r2, r3
 800159e:	091b      	lsrs	r3, r3, #4
 80015a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015a2:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <DMA_CalcBaseAndBitshift+0x68>)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d909      	bls.n	80015ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015be:	f023 0303 	bic.w	r3, r3, #3
 80015c2:	1d1a      	adds	r2, r3, #4
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	659a      	str	r2, [r3, #88]	; 0x58
 80015c8:	e007      	b.n	80015da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015d2:	f023 0303 	bic.w	r3, r3, #3
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	aaaaaaab 	.word	0xaaaaaaab
 80015f0:	08003824 	.word	0x08003824

080015f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001604:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d11f      	bne.n	800164e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d856      	bhi.n	80016c2 <DMA_CheckFifoParam+0xce>
 8001614:	a201      	add	r2, pc, #4	; (adr r2, 800161c <DMA_CheckFifoParam+0x28>)
 8001616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161a:	bf00      	nop
 800161c:	0800162d 	.word	0x0800162d
 8001620:	0800163f 	.word	0x0800163f
 8001624:	0800162d 	.word	0x0800162d
 8001628:	080016c3 	.word	0x080016c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d046      	beq.n	80016c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800163c:	e043      	b.n	80016c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001646:	d140      	bne.n	80016ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800164c:	e03d      	b.n	80016ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001656:	d121      	bne.n	800169c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d837      	bhi.n	80016ce <DMA_CheckFifoParam+0xda>
 800165e:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <DMA_CheckFifoParam+0x70>)
 8001660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001664:	08001675 	.word	0x08001675
 8001668:	0800167b 	.word	0x0800167b
 800166c:	08001675 	.word	0x08001675
 8001670:	0800168d 	.word	0x0800168d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
      break;
 8001678:	e030      	b.n	80016dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d025      	beq.n	80016d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800168a:	e022      	b.n	80016d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001694:	d11f      	bne.n	80016d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800169a:	e01c      	b.n	80016d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d903      	bls.n	80016aa <DMA_CheckFifoParam+0xb6>
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d003      	beq.n	80016b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016a8:	e018      	b.n	80016dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
      break;
 80016ae:	e015      	b.n	80016dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00e      	beq.n	80016da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
      break;
 80016c0:	e00b      	b.n	80016da <DMA_CheckFifoParam+0xe6>
      break;
 80016c2:	bf00      	nop
 80016c4:	e00a      	b.n	80016dc <DMA_CheckFifoParam+0xe8>
      break;
 80016c6:	bf00      	nop
 80016c8:	e008      	b.n	80016dc <DMA_CheckFifoParam+0xe8>
      break;
 80016ca:	bf00      	nop
 80016cc:	e006      	b.n	80016dc <DMA_CheckFifoParam+0xe8>
      break;
 80016ce:	bf00      	nop
 80016d0:	e004      	b.n	80016dc <DMA_CheckFifoParam+0xe8>
      break;
 80016d2:	bf00      	nop
 80016d4:	e002      	b.n	80016dc <DMA_CheckFifoParam+0xe8>
      break;   
 80016d6:	bf00      	nop
 80016d8:	e000      	b.n	80016dc <DMA_CheckFifoParam+0xe8>
      break;
 80016da:	bf00      	nop
    }
  } 
  
  return status; 
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	e16b      	b.n	80019e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001708:	2201      	movs	r2, #1
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	429a      	cmp	r2, r3
 8001722:	f040 815a 	bne.w	80019da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	2b01      	cmp	r3, #1
 8001730:	d005      	beq.n	800173e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173a:	2b02      	cmp	r3, #2
 800173c:	d130      	bne.n	80017a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001774:	2201      	movs	r2, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 0201 	and.w	r2, r3, #1
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d017      	beq.n	80017dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d123      	bne.n	8001830 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	08da      	lsrs	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3208      	adds	r2, #8
 80017f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	220f      	movs	r2, #15
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	691a      	ldr	r2, [r3, #16]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	08da      	lsrs	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3208      	adds	r2, #8
 800182a:	69b9      	ldr	r1, [r7, #24]
 800182c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0203 	and.w	r2, r3, #3
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80b4 	beq.w	80019da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b60      	ldr	r3, [pc, #384]	; (80019f8 <HAL_GPIO_Init+0x30c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	4a5f      	ldr	r2, [pc, #380]	; (80019f8 <HAL_GPIO_Init+0x30c>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b5d      	ldr	r3, [pc, #372]	; (80019f8 <HAL_GPIO_Init+0x30c>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800188e:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <HAL_GPIO_Init+0x310>)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a52      	ldr	r2, [pc, #328]	; (8001a00 <HAL_GPIO_Init+0x314>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d02b      	beq.n	8001912 <HAL_GPIO_Init+0x226>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a51      	ldr	r2, [pc, #324]	; (8001a04 <HAL_GPIO_Init+0x318>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d025      	beq.n	800190e <HAL_GPIO_Init+0x222>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a50      	ldr	r2, [pc, #320]	; (8001a08 <HAL_GPIO_Init+0x31c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d01f      	beq.n	800190a <HAL_GPIO_Init+0x21e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4f      	ldr	r2, [pc, #316]	; (8001a0c <HAL_GPIO_Init+0x320>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d019      	beq.n	8001906 <HAL_GPIO_Init+0x21a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4e      	ldr	r2, [pc, #312]	; (8001a10 <HAL_GPIO_Init+0x324>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0x216>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4d      	ldr	r2, [pc, #308]	; (8001a14 <HAL_GPIO_Init+0x328>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x212>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4c      	ldr	r2, [pc, #304]	; (8001a18 <HAL_GPIO_Init+0x32c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x20e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4b      	ldr	r2, [pc, #300]	; (8001a1c <HAL_GPIO_Init+0x330>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x20a>
 80018f2:	2307      	movs	r3, #7
 80018f4:	e00e      	b.n	8001914 <HAL_GPIO_Init+0x228>
 80018f6:	2308      	movs	r3, #8
 80018f8:	e00c      	b.n	8001914 <HAL_GPIO_Init+0x228>
 80018fa:	2306      	movs	r3, #6
 80018fc:	e00a      	b.n	8001914 <HAL_GPIO_Init+0x228>
 80018fe:	2305      	movs	r3, #5
 8001900:	e008      	b.n	8001914 <HAL_GPIO_Init+0x228>
 8001902:	2304      	movs	r3, #4
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x228>
 8001906:	2303      	movs	r3, #3
 8001908:	e004      	b.n	8001914 <HAL_GPIO_Init+0x228>
 800190a:	2302      	movs	r3, #2
 800190c:	e002      	b.n	8001914 <HAL_GPIO_Init+0x228>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x228>
 8001912:	2300      	movs	r3, #0
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	f002 0203 	and.w	r2, r2, #3
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	4093      	lsls	r3, r2
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001924:	4935      	ldr	r1, [pc, #212]	; (80019fc <HAL_GPIO_Init+0x310>)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_GPIO_Init+0x334>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001956:	4a32      	ldr	r2, [pc, #200]	; (8001a20 <HAL_GPIO_Init+0x334>)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800195c:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <HAL_GPIO_Init+0x334>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001980:	4a27      	ldr	r2, [pc, #156]	; (8001a20 <HAL_GPIO_Init+0x334>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <HAL_GPIO_Init+0x334>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019aa:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <HAL_GPIO_Init+0x334>)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_GPIO_Init+0x334>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <HAL_GPIO_Init+0x334>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3301      	adds	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	2b0f      	cmp	r3, #15
 80019e4:	f67f ae90 	bls.w	8001708 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3724      	adds	r7, #36	; 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40013800 	.word	0x40013800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	40020c00 	.word	0x40020c00
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40021400 	.word	0x40021400
 8001a18:	40021800 	.word	0x40021800
 8001a1c:	40021c00 	.word	0x40021c00
 8001a20:	40013c00 	.word	0x40013c00

08001a24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	e001      	b.n	8001a46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
 8001a60:	4613      	mov	r3, r2
 8001a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a64:	787b      	ldrb	r3, [r7, #1]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a70:	e003      	b.n	8001a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a72:	887b      	ldrh	r3, [r7, #2]
 8001a74:	041a      	lsls	r2, r3, #16
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	619a      	str	r2, [r3, #24]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e12b      	b.n	8001cf2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7fe ffd2 	bl	8000a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2224      	movs	r2, #36	; 0x24
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0201 	bic.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ada:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001aec:	f001 f8da 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 8001af0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4a81      	ldr	r2, [pc, #516]	; (8001cfc <HAL_I2C_Init+0x274>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d807      	bhi.n	8001b0c <HAL_I2C_Init+0x84>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4a80      	ldr	r2, [pc, #512]	; (8001d00 <HAL_I2C_Init+0x278>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	bf94      	ite	ls
 8001b04:	2301      	movls	r3, #1
 8001b06:	2300      	movhi	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	e006      	b.n	8001b1a <HAL_I2C_Init+0x92>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4a7d      	ldr	r2, [pc, #500]	; (8001d04 <HAL_I2C_Init+0x27c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	bf94      	ite	ls
 8001b14:	2301      	movls	r3, #1
 8001b16:	2300      	movhi	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0e7      	b.n	8001cf2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4a78      	ldr	r2, [pc, #480]	; (8001d08 <HAL_I2C_Init+0x280>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0c9b      	lsrs	r3, r3, #18
 8001b2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	4a6a      	ldr	r2, [pc, #424]	; (8001cfc <HAL_I2C_Init+0x274>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d802      	bhi.n	8001b5c <HAL_I2C_Init+0xd4>
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	e009      	b.n	8001b70 <HAL_I2C_Init+0xe8>
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	4a69      	ldr	r2, [pc, #420]	; (8001d0c <HAL_I2C_Init+0x284>)
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	099b      	lsrs	r3, r3, #6
 8001b6e:	3301      	adds	r3, #1
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	430b      	orrs	r3, r1
 8001b76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	495c      	ldr	r1, [pc, #368]	; (8001cfc <HAL_I2C_Init+0x274>)
 8001b8c:	428b      	cmp	r3, r1
 8001b8e:	d819      	bhi.n	8001bc4 <HAL_I2C_Init+0x13c>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1e59      	subs	r1, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b9e:	1c59      	adds	r1, r3, #1
 8001ba0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ba4:	400b      	ands	r3, r1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00a      	beq.n	8001bc0 <HAL_I2C_Init+0x138>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1e59      	subs	r1, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bbe:	e051      	b.n	8001c64 <HAL_I2C_Init+0x1dc>
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	e04f      	b.n	8001c64 <HAL_I2C_Init+0x1dc>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d111      	bne.n	8001bf0 <HAL_I2C_Init+0x168>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1e58      	subs	r0, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	440b      	add	r3, r1
 8001bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bde:	3301      	adds	r3, #1
 8001be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	e012      	b.n	8001c16 <HAL_I2C_Init+0x18e>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1e58      	subs	r0, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	0099      	lsls	r1, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c06:	3301      	adds	r3, #1
 8001c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_I2C_Init+0x196>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e022      	b.n	8001c64 <HAL_I2C_Init+0x1dc>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10e      	bne.n	8001c44 <HAL_I2C_Init+0x1bc>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1e58      	subs	r0, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6859      	ldr	r1, [r3, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	440b      	add	r3, r1
 8001c34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c38:	3301      	adds	r3, #1
 8001c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c42:	e00f      	b.n	8001c64 <HAL_I2C_Init+0x1dc>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1e58      	subs	r0, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	0099      	lsls	r1, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	6809      	ldr	r1, [r1, #0]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6911      	ldr	r1, [r2, #16]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68d2      	ldr	r2, [r2, #12]
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	000186a0 	.word	0x000186a0
 8001d00:	001e847f 	.word	0x001e847f
 8001d04:	003d08ff 	.word	0x003d08ff
 8001d08:	431bde83 	.word	0x431bde83
 8001d0c:	10624dd3 	.word	0x10624dd3

08001d10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	817b      	strh	r3, [r7, #10]
 8001d20:	4613      	mov	r3, r2
 8001d22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7ff f830 	bl	8000d88 <HAL_GetTick>
 8001d28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b20      	cmp	r3, #32
 8001d34:	f040 80e0 	bne.w	8001ef8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2319      	movs	r3, #25
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4970      	ldr	r1, [pc, #448]	; (8001f04 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f964 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e0d3      	b.n	8001efa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_I2C_Master_Transmit+0x50>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e0cc      	b.n	8001efa <HAL_I2C_Master_Transmit+0x1ea>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d007      	beq.n	8001d86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0201 	orr.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2221      	movs	r2, #33	; 0x21
 8001d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2210      	movs	r2, #16
 8001da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	893a      	ldrh	r2, [r7, #8]
 8001db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4a50      	ldr	r2, [pc, #320]	; (8001f08 <HAL_I2C_Master_Transmit+0x1f8>)
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dc8:	8979      	ldrh	r1, [r7, #10]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	6a3a      	ldr	r2, [r7, #32]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f89c 	bl	8001f0c <I2C_MasterRequestWrite>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e08d      	b.n	8001efa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001df4:	e066      	b.n	8001ec4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	6a39      	ldr	r1, [r7, #32]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fa22 	bl	8002244 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00d      	beq.n	8001e22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d107      	bne.n	8001e1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e06b      	b.n	8001efa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d11b      	bne.n	8001e98 <HAL_I2C_Master_Transmit+0x188>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d017      	beq.n	8001e98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	6a39      	ldr	r1, [r7, #32]
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 fa19 	bl	80022d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d107      	bne.n	8001ec0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ebe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e01a      	b.n	8001efa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d194      	bne.n	8001df6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e000      	b.n	8001efa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ef8:	2302      	movs	r3, #2
  }
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	00100002 	.word	0x00100002
 8001f08:	ffff0000 	.word	0xffff0000

08001f0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d006      	beq.n	8001f36 <I2C_MasterRequestWrite+0x2a>
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d003      	beq.n	8001f36 <I2C_MasterRequestWrite+0x2a>
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f34:	d108      	bne.n	8001f48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e00b      	b.n	8001f60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	2b12      	cmp	r3, #18
 8001f4e:	d107      	bne.n	8001f60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f84f 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00d      	beq.n	8001f94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f86:	d103      	bne.n	8001f90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e035      	b.n	8002000 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f9c:	d108      	bne.n	8001fb0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f9e:	897b      	ldrh	r3, [r7, #10]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fac:	611a      	str	r2, [r3, #16]
 8001fae:	e01b      	b.n	8001fe8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fb0:	897b      	ldrh	r3, [r7, #10]
 8001fb2:	11db      	asrs	r3, r3, #7
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	f003 0306 	and.w	r3, r3, #6
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f063 030f 	orn	r3, r3, #15
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	490e      	ldr	r1, [pc, #56]	; (8002008 <I2C_MasterRequestWrite+0xfc>)
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f898 	bl	8002104 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e010      	b.n	8002000 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fde:	897b      	ldrh	r3, [r7, #10]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4907      	ldr	r1, [pc, #28]	; (800200c <I2C_MasterRequestWrite+0x100>)
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f888 	bl	8002104 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	00010008 	.word	0x00010008
 800200c:	00010002 	.word	0x00010002

08002010 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	4613      	mov	r3, r2
 800201e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002020:	e048      	b.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d044      	beq.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202a:	f7fe fead 	bl	8000d88 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d302      	bcc.n	8002040 <I2C_WaitOnFlagUntilTimeout+0x30>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d139      	bne.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	0c1b      	lsrs	r3, r3, #16
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d10d      	bne.n	8002066 <I2C_WaitOnFlagUntilTimeout+0x56>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	43da      	mvns	r2, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	4013      	ands	r3, r2
 8002056:	b29b      	uxth	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf0c      	ite	eq
 800205c:	2301      	moveq	r3, #1
 800205e:	2300      	movne	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	e00c      	b.n	8002080 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	43da      	mvns	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	4013      	ands	r3, r2
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	429a      	cmp	r2, r3
 8002084:	d116      	bne.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f043 0220 	orr.w	r2, r3, #32
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e023      	b.n	80020fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	0c1b      	lsrs	r3, r3, #16
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d10d      	bne.n	80020da <I2C_WaitOnFlagUntilTimeout+0xca>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	43da      	mvns	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4013      	ands	r3, r2
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	e00c      	b.n	80020f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	43da      	mvns	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	4013      	ands	r3, r2
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d093      	beq.n	8002022 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002112:	e071      	b.n	80021f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002122:	d123      	bne.n	800216c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002132:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800213c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f043 0204 	orr.w	r2, r3, #4
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e067      	b.n	800223c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002172:	d041      	beq.n	80021f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002174:	f7fe fe08 	bl	8000d88 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	d302      	bcc.n	800218a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d136      	bne.n	80021f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	0c1b      	lsrs	r3, r3, #16
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d10c      	bne.n	80021ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4013      	ands	r3, r2
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf14      	ite	ne
 80021a6:	2301      	movne	r3, #1
 80021a8:	2300      	moveq	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	e00b      	b.n	80021c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	43da      	mvns	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	4013      	ands	r3, r2
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bf14      	ite	ne
 80021c0:	2301      	movne	r3, #1
 80021c2:	2300      	moveq	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d016      	beq.n	80021f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e021      	b.n	800223c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	0c1b      	lsrs	r3, r3, #16
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d10c      	bne.n	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	43da      	mvns	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	4013      	ands	r3, r2
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	e00b      	b.n	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4013      	ands	r3, r2
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf14      	ite	ne
 800222e:	2301      	movne	r3, #1
 8002230:	2300      	moveq	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	f47f af6d 	bne.w	8002114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002250:	e034      	b.n	80022bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f886 	bl	8002364 <I2C_IsAcknowledgeFailed>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e034      	b.n	80022cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002268:	d028      	beq.n	80022bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800226a:	f7fe fd8d 	bl	8000d88 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	429a      	cmp	r2, r3
 8002278:	d302      	bcc.n	8002280 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d11d      	bne.n	80022bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228a:	2b80      	cmp	r3, #128	; 0x80
 800228c:	d016      	beq.n	80022bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	f043 0220 	orr.w	r2, r3, #32
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e007      	b.n	80022cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c6:	2b80      	cmp	r3, #128	; 0x80
 80022c8:	d1c3      	bne.n	8002252 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022e0:	e034      	b.n	800234c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f83e 	bl	8002364 <I2C_IsAcknowledgeFailed>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e034      	b.n	800235c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d028      	beq.n	800234c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fa:	f7fe fd45 	bl	8000d88 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	429a      	cmp	r2, r3
 8002308:	d302      	bcc.n	8002310 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d11d      	bne.n	800234c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b04      	cmp	r3, #4
 800231c:	d016      	beq.n	800234c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f043 0220 	orr.w	r2, r3, #32
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e007      	b.n	800235c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b04      	cmp	r3, #4
 8002358:	d1c3      	bne.n	80022e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237a:	d11b      	bne.n	80023b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002384:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f043 0204 	orr.w	r2, r3, #4
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e267      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d075      	beq.n	80024ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023e2:	4b88      	ldr	r3, [pc, #544]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d00c      	beq.n	8002408 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ee:	4b85      	ldr	r3, [pc, #532]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d112      	bne.n	8002420 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fa:	4b82      	ldr	r3, [pc, #520]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002406:	d10b      	bne.n	8002420 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	4b7e      	ldr	r3, [pc, #504]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d05b      	beq.n	80024cc <HAL_RCC_OscConfig+0x108>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d157      	bne.n	80024cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e242      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002428:	d106      	bne.n	8002438 <HAL_RCC_OscConfig+0x74>
 800242a:	4b76      	ldr	r3, [pc, #472]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a75      	ldr	r2, [pc, #468]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e01d      	b.n	8002474 <HAL_RCC_OscConfig+0xb0>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x98>
 8002442:	4b70      	ldr	r3, [pc, #448]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a6f      	ldr	r2, [pc, #444]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b6d      	ldr	r3, [pc, #436]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6c      	ldr	r2, [pc, #432]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0xb0>
 800245c:	4b69      	ldr	r3, [pc, #420]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a68      	ldr	r2, [pc, #416]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b66      	ldr	r3, [pc, #408]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a65      	ldr	r2, [pc, #404]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 800246e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe fc84 	bl	8000d88 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002484:	f7fe fc80 	bl	8000d88 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e207      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b5b      	ldr	r3, [pc, #364]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0xc0>
 80024a2:	e014      	b.n	80024ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7fe fc70 	bl	8000d88 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ac:	f7fe fc6c 	bl	8000d88 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1f3      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	4b51      	ldr	r3, [pc, #324]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0xe8>
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d063      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024da:	4b4a      	ldr	r3, [pc, #296]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d11c      	bne.n	800252c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f2:	4b44      	ldr	r3, [pc, #272]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d116      	bne.n	800252c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	4b41      	ldr	r3, [pc, #260]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_RCC_OscConfig+0x152>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d001      	beq.n	8002516 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e1c7      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002516:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4937      	ldr	r1, [pc, #220]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	e03a      	b.n	80025a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d020      	beq.n	8002576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002534:	4b34      	ldr	r3, [pc, #208]	; (8002608 <HAL_RCC_OscConfig+0x244>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7fe fc25 	bl	8000d88 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002542:	f7fe fc21 	bl	8000d88 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e1a8      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002554:	4b2b      	ldr	r3, [pc, #172]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002560:	4b28      	ldr	r3, [pc, #160]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4925      	ldr	r1, [pc, #148]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]
 8002574:	e015      	b.n	80025a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002576:	4b24      	ldr	r3, [pc, #144]	; (8002608 <HAL_RCC_OscConfig+0x244>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7fe fc04 	bl	8000d88 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002584:	f7fe fc00 	bl	8000d88 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e187      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d036      	beq.n	800261c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d016      	beq.n	80025e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <HAL_RCC_OscConfig+0x248>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7fe fbe4 	bl	8000d88 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c4:	f7fe fbe0 	bl	8000d88 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e167      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80025d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x200>
 80025e2:	e01b      	b.n	800261c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_RCC_OscConfig+0x248>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ea:	f7fe fbcd 	bl	8000d88 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f0:	e00e      	b.n	8002610 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f2:	f7fe fbc9 	bl	8000d88 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d907      	bls.n	8002610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e150      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
 8002604:	40023800 	.word	0x40023800
 8002608:	42470000 	.word	0x42470000
 800260c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002610:	4b88      	ldr	r3, [pc, #544]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ea      	bne.n	80025f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8097 	beq.w	8002758 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800262e:	4b81      	ldr	r3, [pc, #516]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10f      	bne.n	800265a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	4b7d      	ldr	r3, [pc, #500]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a7c      	ldr	r2, [pc, #496]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002648:	6413      	str	r3, [r2, #64]	; 0x40
 800264a:	4b7a      	ldr	r3, [pc, #488]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002656:	2301      	movs	r3, #1
 8002658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265a:	4b77      	ldr	r3, [pc, #476]	; (8002838 <HAL_RCC_OscConfig+0x474>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d118      	bne.n	8002698 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002666:	4b74      	ldr	r3, [pc, #464]	; (8002838 <HAL_RCC_OscConfig+0x474>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a73      	ldr	r2, [pc, #460]	; (8002838 <HAL_RCC_OscConfig+0x474>)
 800266c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002672:	f7fe fb89 	bl	8000d88 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267a:	f7fe fb85 	bl	8000d88 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e10c      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268c:	4b6a      	ldr	r3, [pc, #424]	; (8002838 <HAL_RCC_OscConfig+0x474>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x2ea>
 80026a0:	4b64      	ldr	r3, [pc, #400]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	4a63      	ldr	r2, [pc, #396]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6713      	str	r3, [r2, #112]	; 0x70
 80026ac:	e01c      	b.n	80026e8 <HAL_RCC_OscConfig+0x324>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b05      	cmp	r3, #5
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x30c>
 80026b6:	4b5f      	ldr	r3, [pc, #380]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a5e      	ldr	r2, [pc, #376]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026bc:	f043 0304 	orr.w	r3, r3, #4
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70
 80026c2:	4b5c      	ldr	r3, [pc, #368]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4a5b      	ldr	r2, [pc, #364]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6713      	str	r3, [r2, #112]	; 0x70
 80026ce:	e00b      	b.n	80026e8 <HAL_RCC_OscConfig+0x324>
 80026d0:	4b58      	ldr	r3, [pc, #352]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a57      	ldr	r2, [pc, #348]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026d6:	f023 0301 	bic.w	r3, r3, #1
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
 80026dc:	4b55      	ldr	r3, [pc, #340]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a54      	ldr	r2, [pc, #336]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026e2:	f023 0304 	bic.w	r3, r3, #4
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d015      	beq.n	800271c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f0:	f7fe fb4a 	bl	8000d88 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f6:	e00a      	b.n	800270e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f8:	f7fe fb46 	bl	8000d88 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	; 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e0cb      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270e:	4b49      	ldr	r3, [pc, #292]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0ee      	beq.n	80026f8 <HAL_RCC_OscConfig+0x334>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271c:	f7fe fb34 	bl	8000d88 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002722:	e00a      	b.n	800273a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002724:	f7fe fb30 	bl	8000d88 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e0b5      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273a:	4b3e      	ldr	r3, [pc, #248]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1ee      	bne.n	8002724 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002746:	7dfb      	ldrb	r3, [r7, #23]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d105      	bne.n	8002758 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274c:	4b39      	ldr	r3, [pc, #228]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	4a38      	ldr	r2, [pc, #224]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002756:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80a1 	beq.w	80028a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002762:	4b34      	ldr	r3, [pc, #208]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b08      	cmp	r3, #8
 800276c:	d05c      	beq.n	8002828 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d141      	bne.n	80027fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002776:	4b31      	ldr	r3, [pc, #196]	; (800283c <HAL_RCC_OscConfig+0x478>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe fb04 	bl	8000d88 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002784:	f7fe fb00 	bl	8000d88 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e087      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002796:	4b27      	ldr	r3, [pc, #156]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69da      	ldr	r2, [r3, #28]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	019b      	lsls	r3, r3, #6
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	3b01      	subs	r3, #1
 80027bc:	041b      	lsls	r3, r3, #16
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	061b      	lsls	r3, r3, #24
 80027c6:	491b      	ldr	r1, [pc, #108]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027cc:	4b1b      	ldr	r3, [pc, #108]	; (800283c <HAL_RCC_OscConfig+0x478>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7fe fad9 	bl	8000d88 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027da:	f7fe fad5 	bl	8000d88 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e05c      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x416>
 80027f8:	e054      	b.n	80028a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_RCC_OscConfig+0x478>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe fac2 	bl	8000d88 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fabe 	bl	8000d88 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e045      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x444>
 8002826:	e03d      	b.n	80028a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d107      	bne.n	8002840 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e038      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
 8002834:	40023800 	.word	0x40023800
 8002838:	40007000 	.word	0x40007000
 800283c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_RCC_OscConfig+0x4ec>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d028      	beq.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002858:	429a      	cmp	r2, r3
 800285a:	d121      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d11a      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002870:	4013      	ands	r3, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002876:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002878:	4293      	cmp	r3, r2
 800287a:	d111      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	085b      	lsrs	r3, r3, #1
 8002888:	3b01      	subs	r3, #1
 800288a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d107      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800

080028b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0cc      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c8:	4b68      	ldr	r3, [pc, #416]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d90c      	bls.n	80028f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b65      	ldr	r3, [pc, #404]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b63      	ldr	r3, [pc, #396]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0b8      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002908:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a58      	ldr	r2, [pc, #352]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002920:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a52      	ldr	r2, [pc, #328]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800292a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800292c:	4b50      	ldr	r3, [pc, #320]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	494d      	ldr	r1, [pc, #308]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d044      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d119      	bne.n	8002992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e07f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d003      	beq.n	8002972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296e:	2b03      	cmp	r3, #3
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002972:	4b3f      	ldr	r3, [pc, #252]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e06f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002982:	4b3b      	ldr	r3, [pc, #236]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e067      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002992:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f023 0203 	bic.w	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4934      	ldr	r1, [pc, #208]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a4:	f7fe f9f0 	bl	8000d88 <HAL_GetTick>
 80029a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ac:	f7fe f9ec 	bl	8000d88 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e04f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 020c 	and.w	r2, r3, #12
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d1eb      	bne.n	80029ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d20c      	bcs.n	80029fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e032      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4916      	ldr	r1, [pc, #88]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	490e      	ldr	r1, [pc, #56]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a3a:	f000 f821 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	490a      	ldr	r1, [pc, #40]	; (8002a74 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	5ccb      	ldrb	r3, [r1, r3]
 8002a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a52:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe f950 	bl	8000d00 <HAL_InitTick>

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023c00 	.word	0x40023c00
 8002a70:	40023800 	.word	0x40023800
 8002a74:	0800380c 	.word	0x0800380c
 8002a78:	20000014 	.word	0x20000014
 8002a7c:	20000018 	.word	0x20000018

08002a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a84:	b094      	sub	sp, #80	; 0x50
 8002a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a90:	2300      	movs	r3, #0
 8002a92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a98:	4b79      	ldr	r3, [pc, #484]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d00d      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	f200 80e1 	bhi.w	8002c6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d003      	beq.n	8002aba <HAL_RCC_GetSysClockFreq+0x3a>
 8002ab2:	e0db      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ab4:	4b73      	ldr	r3, [pc, #460]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ab6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ab8:	e0db      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aba:	4b73      	ldr	r3, [pc, #460]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x208>)
 8002abc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002abe:	e0d8      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ac0:	4b6f      	ldr	r3, [pc, #444]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ac8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aca:	4b6d      	ldr	r3, [pc, #436]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d063      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad6:	4b6a      	ldr	r3, [pc, #424]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	099b      	lsrs	r3, r3, #6
 8002adc:	2200      	movs	r2, #0
 8002ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aea:	2300      	movs	r3, #0
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
 8002aee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002af2:	4622      	mov	r2, r4
 8002af4:	462b      	mov	r3, r5
 8002af6:	f04f 0000 	mov.w	r0, #0
 8002afa:	f04f 0100 	mov.w	r1, #0
 8002afe:	0159      	lsls	r1, r3, #5
 8002b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b04:	0150      	lsls	r0, r2, #5
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	1a51      	subs	r1, r2, r1
 8002b0e:	6139      	str	r1, [r7, #16]
 8002b10:	4629      	mov	r1, r5
 8002b12:	eb63 0301 	sbc.w	r3, r3, r1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b24:	4659      	mov	r1, fp
 8002b26:	018b      	lsls	r3, r1, #6
 8002b28:	4651      	mov	r1, sl
 8002b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b2e:	4651      	mov	r1, sl
 8002b30:	018a      	lsls	r2, r1, #6
 8002b32:	4651      	mov	r1, sl
 8002b34:	ebb2 0801 	subs.w	r8, r2, r1
 8002b38:	4659      	mov	r1, fp
 8002b3a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b52:	4690      	mov	r8, r2
 8002b54:	4699      	mov	r9, r3
 8002b56:	4623      	mov	r3, r4
 8002b58:	eb18 0303 	adds.w	r3, r8, r3
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	462b      	mov	r3, r5
 8002b60:	eb49 0303 	adc.w	r3, r9, r3
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b72:	4629      	mov	r1, r5
 8002b74:	024b      	lsls	r3, r1, #9
 8002b76:	4621      	mov	r1, r4
 8002b78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b7c:	4621      	mov	r1, r4
 8002b7e:	024a      	lsls	r2, r1, #9
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b86:	2200      	movs	r2, #0
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b90:	f7fd fb1a 	bl	80001c8 <__aeabi_uldivmod>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4613      	mov	r3, r2
 8002b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b9c:	e058      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9e:	4b38      	ldr	r3, [pc, #224]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	099b      	lsrs	r3, r3, #6
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	4611      	mov	r1, r2
 8002baa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bae:	623b      	str	r3, [r7, #32]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bb8:	4642      	mov	r2, r8
 8002bba:	464b      	mov	r3, r9
 8002bbc:	f04f 0000 	mov.w	r0, #0
 8002bc0:	f04f 0100 	mov.w	r1, #0
 8002bc4:	0159      	lsls	r1, r3, #5
 8002bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bca:	0150      	lsls	r0, r2, #5
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4641      	mov	r1, r8
 8002bd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002be8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bf0:	ebb2 040a 	subs.w	r4, r2, sl
 8002bf4:	eb63 050b 	sbc.w	r5, r3, fp
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	00eb      	lsls	r3, r5, #3
 8002c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c06:	00e2      	lsls	r2, r4, #3
 8002c08:	4614      	mov	r4, r2
 8002c0a:	461d      	mov	r5, r3
 8002c0c:	4643      	mov	r3, r8
 8002c0e:	18e3      	adds	r3, r4, r3
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	464b      	mov	r3, r9
 8002c14:	eb45 0303 	adc.w	r3, r5, r3
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c26:	4629      	mov	r1, r5
 8002c28:	028b      	lsls	r3, r1, #10
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c30:	4621      	mov	r1, r4
 8002c32:	028a      	lsls	r2, r1, #10
 8002c34:	4610      	mov	r0, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	61fa      	str	r2, [r7, #28]
 8002c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c44:	f7fd fac0 	bl	80001c8 <__aeabi_uldivmod>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c6a:	e002      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3750      	adds	r7, #80	; 0x50
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	00f42400 	.word	0x00f42400
 8002c88:	007a1200 	.word	0x007a1200

08002c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000014 	.word	0x20000014

08002ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ca8:	f7ff fff0 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	0a9b      	lsrs	r3, r3, #10
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4903      	ldr	r1, [pc, #12]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	0800381c 	.word	0x0800381c

08002ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cd0:	f7ff ffdc 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0b5b      	lsrs	r3, r3, #13
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4903      	ldr	r1, [pc, #12]	; (8002cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	0800381c 	.word	0x0800381c

08002cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e042      	b.n	8002d8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd fee4 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2224      	movs	r2, #36	; 0x24
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fa9f 	bl	800327c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d112      	bne.n	8002dd4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_UART_Receive_DMA+0x26>
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e00b      	b.n	8002dd6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f930 	bl	8003030 <UART_Start_Receive_DMA>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	e000      	b.n	8002dd6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b09c      	sub	sp, #112	; 0x70
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d172      	bne.n	8002f34 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e50:	2200      	movs	r2, #0
 8002e52:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5e:	e853 3f00 	ldrex	r3, [r3]
 8002e62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e74:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e7c:	e841 2300 	strex	r3, r2, [r1]
 8002e80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e5      	bne.n	8002e54 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3314      	adds	r3, #20
 8002e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e92:	e853 3f00 	ldrex	r3, [r3]
 8002e96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	667b      	str	r3, [r7, #100]	; 0x64
 8002ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3314      	adds	r3, #20
 8002ea6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ea8:	647a      	str	r2, [r7, #68]	; 0x44
 8002eaa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002eae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002eb0:	e841 2300 	strex	r3, r2, [r1]
 8002eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e5      	bne.n	8002e88 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	e853 3f00 	ldrex	r3, [r3]
 8002eca:	623b      	str	r3, [r7, #32]
   return(result);
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3314      	adds	r3, #20
 8002eda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002edc:	633a      	str	r2, [r7, #48]	; 0x30
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee4:	e841 2300 	strex	r3, r2, [r1]
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e5      	bne.n	8002ebc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d119      	bne.n	8002f34 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	e853 3f00 	ldrex	r3, [r3]
 8002f0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0310 	bic.w	r3, r3, #16
 8002f16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f20:	61fa      	str	r2, [r7, #28]
 8002f22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f24:	69b9      	ldr	r1, [r7, #24]
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	e841 2300 	strex	r3, r2, [r1]
 8002f2c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e5      	bne.n	8002f00 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f36:	2200      	movs	r2, #0
 8002f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d106      	bne.n	8002f50 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f46:	4619      	mov	r1, r3
 8002f48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002f4a:	f7ff ff66 	bl	8002e1a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f4e:	e002      	b.n	8002f56 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002f50:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002f52:	f7ff ff44 	bl	8002dde <HAL_UART_RxCpltCallback>
}
 8002f56:	bf00      	nop
 8002f58:	3770      	adds	r7, #112	; 0x70
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d108      	bne.n	8002f8c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f7e:	085b      	lsrs	r3, r3, #1
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	4619      	mov	r1, r3
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f7ff ff48 	bl	8002e1a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f8a:	e002      	b.n	8002f92 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7ff ff30 	bl	8002df2 <HAL_UART_RxHalfCpltCallback>
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002faa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb6:	2b80      	cmp	r3, #128	; 0x80
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b21      	cmp	r3, #33	; 0x21
 8002fcc:	d108      	bne.n	8002fe0 <UART_DMAError+0x46>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002fda:	68b8      	ldr	r0, [r7, #8]
 8002fdc:	f000 f8c2 	bl	8003164 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fea:	2b40      	cmp	r3, #64	; 0x40
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b22      	cmp	r3, #34	; 0x22
 8003000:	d108      	bne.n	8003014 <UART_DMAError+0x7a>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2200      	movs	r2, #0
 800300c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800300e:	68b8      	ldr	r0, [r7, #8]
 8003010:	f000 f8d0 	bl	80031b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003018:	f043 0210 	orr.w	r2, r3, #16
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003020:	68b8      	ldr	r0, [r7, #8]
 8003022:	f7ff fef0 	bl	8002e06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b098      	sub	sp, #96	; 0x60
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	88fa      	ldrh	r2, [r7, #6]
 8003048:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2222      	movs	r2, #34	; 0x22
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	4a3e      	ldr	r2, [pc, #248]	; (8003158 <UART_Start_Receive_DMA+0x128>)
 800305e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003064:	4a3d      	ldr	r2, [pc, #244]	; (800315c <UART_Start_Receive_DMA+0x12c>)
 8003066:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	4a3c      	ldr	r2, [pc, #240]	; (8003160 <UART_Start_Receive_DMA+0x130>)
 800306e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003074:	2200      	movs	r2, #0
 8003076:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003078:	f107 0308 	add.w	r3, r7, #8
 800307c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3304      	adds	r3, #4
 8003088:	4619      	mov	r1, r3
 800308a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	f7fe f86a 	bl	8001168 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003094:	2300      	movs	r3, #0
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d019      	beq.n	80030e6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	330c      	adds	r3, #12
 80030b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030bc:	e853 3f00 	ldrex	r3, [r3]
 80030c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80030d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80030d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030da:	e841 2300 	strex	r3, r2, [r1]
 80030de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80030e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1e5      	bne.n	80030b2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3314      	adds	r3, #20
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	e853 3f00 	ldrex	r3, [r3]
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	657b      	str	r3, [r7, #84]	; 0x54
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3314      	adds	r3, #20
 8003104:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003106:	63ba      	str	r2, [r7, #56]	; 0x38
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800310c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800310e:	e841 2300 	strex	r3, r2, [r1]
 8003112:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e5      	bne.n	80030e6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3314      	adds	r3, #20
 8003120:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	e853 3f00 	ldrex	r3, [r3]
 8003128:	617b      	str	r3, [r7, #20]
   return(result);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003130:	653b      	str	r3, [r7, #80]	; 0x50
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3314      	adds	r3, #20
 8003138:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800313a:	627a      	str	r2, [r7, #36]	; 0x24
 800313c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313e:	6a39      	ldr	r1, [r7, #32]
 8003140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003142:	e841 2300 	strex	r3, r2, [r1]
 8003146:	61fb      	str	r3, [r7, #28]
   return(result);
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e5      	bne.n	800311a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3760      	adds	r7, #96	; 0x60
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	08002e33 	.word	0x08002e33
 800315c:	08002f5f 	.word	0x08002f5f
 8003160:	08002f9b 	.word	0x08002f9b

08003164 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	330c      	adds	r3, #12
 8003172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	e853 3f00 	ldrex	r3, [r3]
 800317a:	60bb      	str	r3, [r7, #8]
   return(result);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	330c      	adds	r3, #12
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	61ba      	str	r2, [r7, #24]
 800318e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003190:	6979      	ldr	r1, [r7, #20]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	e841 2300 	strex	r3, r2, [r1]
 8003198:	613b      	str	r3, [r7, #16]
   return(result);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e5      	bne.n	800316c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80031a8:	bf00      	nop
 80031aa:	3724      	adds	r7, #36	; 0x24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b095      	sub	sp, #84	; 0x54
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	330c      	adds	r3, #12
 80031c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c6:	e853 3f00 	ldrex	r3, [r3]
 80031ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	330c      	adds	r3, #12
 80031da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031dc:	643a      	str	r2, [r7, #64]	; 0x40
 80031de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031e4:	e841 2300 	strex	r3, r2, [r1]
 80031e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e5      	bne.n	80031bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3314      	adds	r3, #20
 80031f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	e853 3f00 	ldrex	r3, [r3]
 80031fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	64bb      	str	r3, [r7, #72]	; 0x48
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3314      	adds	r3, #20
 800320e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003210:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003218:	e841 2300 	strex	r3, r2, [r1]
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e5      	bne.n	80031f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	2b01      	cmp	r3, #1
 800322a:	d119      	bne.n	8003260 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	330c      	adds	r3, #12
 8003232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	e853 3f00 	ldrex	r3, [r3]
 800323a:	60bb      	str	r3, [r7, #8]
   return(result);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f023 0310 	bic.w	r3, r3, #16
 8003242:	647b      	str	r3, [r7, #68]	; 0x44
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	330c      	adds	r3, #12
 800324a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800324c:	61ba      	str	r2, [r7, #24]
 800324e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003250:	6979      	ldr	r1, [r7, #20]
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	e841 2300 	strex	r3, r2, [r1]
 8003258:	613b      	str	r3, [r7, #16]
   return(result);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e5      	bne.n	800322c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800326e:	bf00      	nop
 8003270:	3754      	adds	r7, #84	; 0x54
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800327c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003280:	b0c0      	sub	sp, #256	; 0x100
 8003282:	af00      	add	r7, sp, #0
 8003284:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003298:	68d9      	ldr	r1, [r3, #12]
 800329a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	ea40 0301 	orr.w	r3, r0, r1
 80032a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032d4:	f021 010c 	bic.w	r1, r1, #12
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032e2:	430b      	orrs	r3, r1
 80032e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f6:	6999      	ldr	r1, [r3, #24]
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	ea40 0301 	orr.w	r3, r0, r1
 8003302:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4b8f      	ldr	r3, [pc, #572]	; (8003548 <UART_SetConfig+0x2cc>)
 800330c:	429a      	cmp	r2, r3
 800330e:	d005      	beq.n	800331c <UART_SetConfig+0xa0>
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b8d      	ldr	r3, [pc, #564]	; (800354c <UART_SetConfig+0x2d0>)
 8003318:	429a      	cmp	r2, r3
 800331a:	d104      	bne.n	8003326 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800331c:	f7ff fcd6 	bl	8002ccc <HAL_RCC_GetPCLK2Freq>
 8003320:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003324:	e003      	b.n	800332e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003326:	f7ff fcbd 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 800332a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003338:	f040 810c 	bne.w	8003554 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800333c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003340:	2200      	movs	r2, #0
 8003342:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003346:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800334a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800334e:	4622      	mov	r2, r4
 8003350:	462b      	mov	r3, r5
 8003352:	1891      	adds	r1, r2, r2
 8003354:	65b9      	str	r1, [r7, #88]	; 0x58
 8003356:	415b      	adcs	r3, r3
 8003358:	65fb      	str	r3, [r7, #92]	; 0x5c
 800335a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800335e:	4621      	mov	r1, r4
 8003360:	eb12 0801 	adds.w	r8, r2, r1
 8003364:	4629      	mov	r1, r5
 8003366:	eb43 0901 	adc.w	r9, r3, r1
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003376:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800337a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800337e:	4690      	mov	r8, r2
 8003380:	4699      	mov	r9, r3
 8003382:	4623      	mov	r3, r4
 8003384:	eb18 0303 	adds.w	r3, r8, r3
 8003388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800338c:	462b      	mov	r3, r5
 800338e:	eb49 0303 	adc.w	r3, r9, r3
 8003392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033aa:	460b      	mov	r3, r1
 80033ac:	18db      	adds	r3, r3, r3
 80033ae:	653b      	str	r3, [r7, #80]	; 0x50
 80033b0:	4613      	mov	r3, r2
 80033b2:	eb42 0303 	adc.w	r3, r2, r3
 80033b6:	657b      	str	r3, [r7, #84]	; 0x54
 80033b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033c0:	f7fc ff02 	bl	80001c8 <__aeabi_uldivmod>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4b61      	ldr	r3, [pc, #388]	; (8003550 <UART_SetConfig+0x2d4>)
 80033ca:	fba3 2302 	umull	r2, r3, r3, r2
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	011c      	lsls	r4, r3, #4
 80033d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033e4:	4642      	mov	r2, r8
 80033e6:	464b      	mov	r3, r9
 80033e8:	1891      	adds	r1, r2, r2
 80033ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80033ec:	415b      	adcs	r3, r3
 80033ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033f4:	4641      	mov	r1, r8
 80033f6:	eb12 0a01 	adds.w	sl, r2, r1
 80033fa:	4649      	mov	r1, r9
 80033fc:	eb43 0b01 	adc.w	fp, r3, r1
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800340c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003414:	4692      	mov	sl, r2
 8003416:	469b      	mov	fp, r3
 8003418:	4643      	mov	r3, r8
 800341a:	eb1a 0303 	adds.w	r3, sl, r3
 800341e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003422:	464b      	mov	r3, r9
 8003424:	eb4b 0303 	adc.w	r3, fp, r3
 8003428:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003438:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800343c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003440:	460b      	mov	r3, r1
 8003442:	18db      	adds	r3, r3, r3
 8003444:	643b      	str	r3, [r7, #64]	; 0x40
 8003446:	4613      	mov	r3, r2
 8003448:	eb42 0303 	adc.w	r3, r2, r3
 800344c:	647b      	str	r3, [r7, #68]	; 0x44
 800344e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003452:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003456:	f7fc feb7 	bl	80001c8 <__aeabi_uldivmod>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4611      	mov	r1, r2
 8003460:	4b3b      	ldr	r3, [pc, #236]	; (8003550 <UART_SetConfig+0x2d4>)
 8003462:	fba3 2301 	umull	r2, r3, r3, r1
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	2264      	movs	r2, #100	; 0x64
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	1acb      	subs	r3, r1, r3
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003476:	4b36      	ldr	r3, [pc, #216]	; (8003550 <UART_SetConfig+0x2d4>)
 8003478:	fba3 2302 	umull	r2, r3, r3, r2
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003484:	441c      	add	r4, r3
 8003486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800348a:	2200      	movs	r2, #0
 800348c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003490:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003494:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003498:	4642      	mov	r2, r8
 800349a:	464b      	mov	r3, r9
 800349c:	1891      	adds	r1, r2, r2
 800349e:	63b9      	str	r1, [r7, #56]	; 0x38
 80034a0:	415b      	adcs	r3, r3
 80034a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034a8:	4641      	mov	r1, r8
 80034aa:	1851      	adds	r1, r2, r1
 80034ac:	6339      	str	r1, [r7, #48]	; 0x30
 80034ae:	4649      	mov	r1, r9
 80034b0:	414b      	adcs	r3, r1
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034c0:	4659      	mov	r1, fp
 80034c2:	00cb      	lsls	r3, r1, #3
 80034c4:	4651      	mov	r1, sl
 80034c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ca:	4651      	mov	r1, sl
 80034cc:	00ca      	lsls	r2, r1, #3
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
 80034d2:	4603      	mov	r3, r0
 80034d4:	4642      	mov	r2, r8
 80034d6:	189b      	adds	r3, r3, r2
 80034d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034dc:	464b      	mov	r3, r9
 80034de:	460a      	mov	r2, r1
 80034e0:	eb42 0303 	adc.w	r3, r2, r3
 80034e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034fc:	460b      	mov	r3, r1
 80034fe:	18db      	adds	r3, r3, r3
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
 8003502:	4613      	mov	r3, r2
 8003504:	eb42 0303 	adc.w	r3, r2, r3
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800350a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800350e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003512:	f7fc fe59 	bl	80001c8 <__aeabi_uldivmod>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <UART_SetConfig+0x2d4>)
 800351c:	fba3 1302 	umull	r1, r3, r3, r2
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	2164      	movs	r1, #100	; 0x64
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	3332      	adds	r3, #50	; 0x32
 800352e:	4a08      	ldr	r2, [pc, #32]	; (8003550 <UART_SetConfig+0x2d4>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	f003 0207 	and.w	r2, r3, #7
 800353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4422      	add	r2, r4
 8003542:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003544:	e106      	b.n	8003754 <UART_SetConfig+0x4d8>
 8003546:	bf00      	nop
 8003548:	40011000 	.word	0x40011000
 800354c:	40011400 	.word	0x40011400
 8003550:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003558:	2200      	movs	r2, #0
 800355a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800355e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003562:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003566:	4642      	mov	r2, r8
 8003568:	464b      	mov	r3, r9
 800356a:	1891      	adds	r1, r2, r2
 800356c:	6239      	str	r1, [r7, #32]
 800356e:	415b      	adcs	r3, r3
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
 8003572:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003576:	4641      	mov	r1, r8
 8003578:	1854      	adds	r4, r2, r1
 800357a:	4649      	mov	r1, r9
 800357c:	eb43 0501 	adc.w	r5, r3, r1
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	00eb      	lsls	r3, r5, #3
 800358a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800358e:	00e2      	lsls	r2, r4, #3
 8003590:	4614      	mov	r4, r2
 8003592:	461d      	mov	r5, r3
 8003594:	4643      	mov	r3, r8
 8003596:	18e3      	adds	r3, r4, r3
 8003598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800359c:	464b      	mov	r3, r9
 800359e:	eb45 0303 	adc.w	r3, r5, r3
 80035a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035c2:	4629      	mov	r1, r5
 80035c4:	008b      	lsls	r3, r1, #2
 80035c6:	4621      	mov	r1, r4
 80035c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035cc:	4621      	mov	r1, r4
 80035ce:	008a      	lsls	r2, r1, #2
 80035d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035d4:	f7fc fdf8 	bl	80001c8 <__aeabi_uldivmod>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4b60      	ldr	r3, [pc, #384]	; (8003760 <UART_SetConfig+0x4e4>)
 80035de:	fba3 2302 	umull	r2, r3, r3, r2
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	011c      	lsls	r4, r3, #4
 80035e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035f8:	4642      	mov	r2, r8
 80035fa:	464b      	mov	r3, r9
 80035fc:	1891      	adds	r1, r2, r2
 80035fe:	61b9      	str	r1, [r7, #24]
 8003600:	415b      	adcs	r3, r3
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003608:	4641      	mov	r1, r8
 800360a:	1851      	adds	r1, r2, r1
 800360c:	6139      	str	r1, [r7, #16]
 800360e:	4649      	mov	r1, r9
 8003610:	414b      	adcs	r3, r1
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003620:	4659      	mov	r1, fp
 8003622:	00cb      	lsls	r3, r1, #3
 8003624:	4651      	mov	r1, sl
 8003626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800362a:	4651      	mov	r1, sl
 800362c:	00ca      	lsls	r2, r1, #3
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	4603      	mov	r3, r0
 8003634:	4642      	mov	r2, r8
 8003636:	189b      	adds	r3, r3, r2
 8003638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800363c:	464b      	mov	r3, r9
 800363e:	460a      	mov	r2, r1
 8003640:	eb42 0303 	adc.w	r3, r2, r3
 8003644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	67bb      	str	r3, [r7, #120]	; 0x78
 8003652:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003660:	4649      	mov	r1, r9
 8003662:	008b      	lsls	r3, r1, #2
 8003664:	4641      	mov	r1, r8
 8003666:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800366a:	4641      	mov	r1, r8
 800366c:	008a      	lsls	r2, r1, #2
 800366e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003672:	f7fc fda9 	bl	80001c8 <__aeabi_uldivmod>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4611      	mov	r1, r2
 800367c:	4b38      	ldr	r3, [pc, #224]	; (8003760 <UART_SetConfig+0x4e4>)
 800367e:	fba3 2301 	umull	r2, r3, r3, r1
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	2264      	movs	r2, #100	; 0x64
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	1acb      	subs	r3, r1, r3
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	3332      	adds	r3, #50	; 0x32
 8003690:	4a33      	ldr	r2, [pc, #204]	; (8003760 <UART_SetConfig+0x4e4>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800369c:	441c      	add	r4, r3
 800369e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a2:	2200      	movs	r2, #0
 80036a4:	673b      	str	r3, [r7, #112]	; 0x70
 80036a6:	677a      	str	r2, [r7, #116]	; 0x74
 80036a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036ac:	4642      	mov	r2, r8
 80036ae:	464b      	mov	r3, r9
 80036b0:	1891      	adds	r1, r2, r2
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	415b      	adcs	r3, r3
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036bc:	4641      	mov	r1, r8
 80036be:	1851      	adds	r1, r2, r1
 80036c0:	6039      	str	r1, [r7, #0]
 80036c2:	4649      	mov	r1, r9
 80036c4:	414b      	adcs	r3, r1
 80036c6:	607b      	str	r3, [r7, #4]
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036d4:	4659      	mov	r1, fp
 80036d6:	00cb      	lsls	r3, r1, #3
 80036d8:	4651      	mov	r1, sl
 80036da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036de:	4651      	mov	r1, sl
 80036e0:	00ca      	lsls	r2, r1, #3
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	4642      	mov	r2, r8
 80036ea:	189b      	adds	r3, r3, r2
 80036ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80036ee:	464b      	mov	r3, r9
 80036f0:	460a      	mov	r2, r1
 80036f2:	eb42 0303 	adc.w	r3, r2, r3
 80036f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	663b      	str	r3, [r7, #96]	; 0x60
 8003702:	667a      	str	r2, [r7, #100]	; 0x64
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003710:	4649      	mov	r1, r9
 8003712:	008b      	lsls	r3, r1, #2
 8003714:	4641      	mov	r1, r8
 8003716:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800371a:	4641      	mov	r1, r8
 800371c:	008a      	lsls	r2, r1, #2
 800371e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003722:	f7fc fd51 	bl	80001c8 <__aeabi_uldivmod>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <UART_SetConfig+0x4e4>)
 800372c:	fba3 1302 	umull	r1, r3, r3, r2
 8003730:	095b      	lsrs	r3, r3, #5
 8003732:	2164      	movs	r1, #100	; 0x64
 8003734:	fb01 f303 	mul.w	r3, r1, r3
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	3332      	adds	r3, #50	; 0x32
 800373e:	4a08      	ldr	r2, [pc, #32]	; (8003760 <UART_SetConfig+0x4e4>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	095b      	lsrs	r3, r3, #5
 8003746:	f003 020f 	and.w	r2, r3, #15
 800374a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4422      	add	r2, r4
 8003752:	609a      	str	r2, [r3, #8]
}
 8003754:	bf00      	nop
 8003756:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800375a:	46bd      	mov	sp, r7
 800375c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003760:	51eb851f 	.word	0x51eb851f

08003764 <memset>:
 8003764:	4402      	add	r2, r0
 8003766:	4603      	mov	r3, r0
 8003768:	4293      	cmp	r3, r2
 800376a:	d100      	bne.n	800376e <memset+0xa>
 800376c:	4770      	bx	lr
 800376e:	f803 1b01 	strb.w	r1, [r3], #1
 8003772:	e7f9      	b.n	8003768 <memset+0x4>

08003774 <__libc_init_array>:
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	4d0d      	ldr	r5, [pc, #52]	; (80037ac <__libc_init_array+0x38>)
 8003778:	4c0d      	ldr	r4, [pc, #52]	; (80037b0 <__libc_init_array+0x3c>)
 800377a:	1b64      	subs	r4, r4, r5
 800377c:	10a4      	asrs	r4, r4, #2
 800377e:	2600      	movs	r6, #0
 8003780:	42a6      	cmp	r6, r4
 8003782:	d109      	bne.n	8003798 <__libc_init_array+0x24>
 8003784:	4d0b      	ldr	r5, [pc, #44]	; (80037b4 <__libc_init_array+0x40>)
 8003786:	4c0c      	ldr	r4, [pc, #48]	; (80037b8 <__libc_init_array+0x44>)
 8003788:	f000 f818 	bl	80037bc <_init>
 800378c:	1b64      	subs	r4, r4, r5
 800378e:	10a4      	asrs	r4, r4, #2
 8003790:	2600      	movs	r6, #0
 8003792:	42a6      	cmp	r6, r4
 8003794:	d105      	bne.n	80037a2 <__libc_init_array+0x2e>
 8003796:	bd70      	pop	{r4, r5, r6, pc}
 8003798:	f855 3b04 	ldr.w	r3, [r5], #4
 800379c:	4798      	blx	r3
 800379e:	3601      	adds	r6, #1
 80037a0:	e7ee      	b.n	8003780 <__libc_init_array+0xc>
 80037a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a6:	4798      	blx	r3
 80037a8:	3601      	adds	r6, #1
 80037aa:	e7f2      	b.n	8003792 <__libc_init_array+0x1e>
 80037ac:	08003834 	.word	0x08003834
 80037b0:	08003834 	.word	0x08003834
 80037b4:	08003834 	.word	0x08003834
 80037b8:	08003838 	.word	0x08003838

080037bc <_init>:
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	bf00      	nop
 80037c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c2:	bc08      	pop	{r3}
 80037c4:	469e      	mov	lr, r3
 80037c6:	4770      	bx	lr

080037c8 <_fini>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	bf00      	nop
 80037cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ce:	bc08      	pop	{r3}
 80037d0:	469e      	mov	lr, r3
 80037d2:	4770      	bx	lr
